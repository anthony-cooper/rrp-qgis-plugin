# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ImpactRasterCreator
                                 A QGIS plugin
 This plugin generates flood impact maps
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-07-11
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Anthony Cooper
        email                : anthony.cooper@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import *
from qgis.core import *
import gdal_calc


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .impact_raster_creator_dialog import ImpactRasterCreatorDialog
import os.path


class ImpactRasterCreator:

    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ImpactRasterCreator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Impact Raster Creator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ImpactRasterCreator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/impact_raster_creator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Impact Raster Creator'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Impact Raster Creator'),
                action)
            self.iface.removeToolBarIcon(action)


    joinedLayers = []
    impactLayers = []
    levelLayers = []
    baseLoc = ''

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ImpactRasterCreatorDialog()
            self.dlg.pushButton.clicked.connect(self.select_output_folder)

        # Initialise list of level layers
        self.impactLayers = []
        self.levelLayers = []
        layers = []
        # Fetch the currently loaded layers
        layers = self.load_all_layers(QgsProject.instance().layerTreeRoot().children(), layers)
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        for layer in layers:
            if layer.layer().type() == 1:
                if (layer.name()).find('h_Max') != -1:
                    self.dlg.comboBox.addItem(layer.name())
                    self.levelLayers.append(layer)
                elif (layer.name()).find('_dh') != -1:
                    self.impactLayers.append(layer)

                if ((layer.name()).find('BAS') != -1):
                    self.dlg.comboBox.setCurrentIndex(self.dlg.comboBox.count()-1)
                    self.baseLoc = os.path.abspath(os.path.join(os.path.dirname(layer.layer().source()), os.path.pardir, os.path.pardir, 'Impact'))



        self.update()

        self.dlg.comboBox.currentIndexChanged.connect(self.update)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            folder = self.dlg.outputFolderDlg.text()
            if not os.path.exists(folder):
                os.makedirs(folder)
            for joinedLayer in self.joinedLayers:
                if joinedLayer[6].isSelected() is True:
                    joinedLayer[5] = self.dlg.outputFolderDlg.text() + '/'  + joinedLayer[4] + '.tif'
                    if joinedLayer[3] is False:
                        QgsProject.instance().removeMapLayer(joinedLayer[7].layerId())

                    gdal_calc.Calc(A=joinedLayer[0].layer().source(), B=joinedLayer[1].layer().source(), A_band=1, B_band=1, calc="A-B", outfile=joinedLayer[5], overwrite=True)

                    self.iface.addRasterLayer(joinedLayer[5],joinedLayer[4])


    def update(self):
        #Set file location
        if self.baseLoc != '':
            self.dlg.outputFolderDlg.setText(self.baseLoc)


        #Update and create joined layers list
        self.joinedLayers = []
        events = (self.dlg.lineEdit.text()).split(",")
        self.dlg.rasterList.clear()

        for event in events:
            eloc = self.levelLayers[self.dlg.comboBox.currentIndex()].name().find(event)
            if eloc != -1:
                baseLayer = (self.levelLayers[self.dlg.comboBox.currentIndex()].name()).replace(event,'~event~')
                break

        baseLayers = []
        devLayers = []
        for levelLayer in self.levelLayers:
            for event in events:
                eloc = levelLayer.name().find(event)
                if eloc != -1:
                    genLayer = (levelLayer.name()).replace(event,'~event~')
                    if genLayer == baseLayer:
                        baseLayers.append([levelLayer, event])
                    else:
                        devLayers.append([levelLayer, event])
                    break

        for devLayer in devLayers:
            for baseLayer in baseLayers:
                if devLayer[1] == baseLayer[1]:
                    self.joinedLayers.append([devLayer[0], baseLayer[0], devLayer[1], True, '', '',QListWidgetItem(),''])
                    break

        for joinedLayer in self.joinedLayers:
            strSuf = ''
            strPre = ''
            strDev = ''
            strBas = ''
            for idx, let in enumerate(joinedLayer[0].name()):
                if let == joinedLayer[1].name()[idx]:
                    strPre = strPre + let
                else:
                    strDev = joinedLayer[0].name()[(idx-len(joinedLayer[0].name())):]
                    strBas = joinedLayer[1].name()[(idx-len(joinedLayer[1].name())):]
                    break

            for idx, let in enumerate(reversed(strDev)):
                if let == strBas[len(strBas)-idx-1]:
                    strSuf = let + strSuf
                else:
                    strDev = strDev[:(len(strDev)-len(strSuf))]
                    strBas = strBas[:(len(strBas)-len(strSuf))]
                    break

            joinedLayer[4] = strPre + '[' + strDev + ']-[' + strBas + ']_' + joinedLayer[2] + '_dh'

            for impactLayer in self.impactLayers:
                if joinedLayer[4] == impactLayer.name():
                    joinedLayer[3] = False
                    joinedLayer[7] = impactLayer
                    break

            joinedLayer[6] = QListWidgetItem(joinedLayer[4], self.dlg.rasterList)
            joinedLayer[6].setSelected(joinedLayer[3])





    def load_all_layers(self, group, layers):
        for child in group:
            if isinstance(child, QgsLayerTreeLayer):
                layers.append(child)
            elif isinstance(child, QgsLayerTreeGroup):
                layers = self.load_all_layers(child.children(), layers)
        return layers



    def select_output_folder(self):
        folder = self.dlg.outputFolderDlg.text()
        folder = self.find_existing(folder)
        folder = QFileDialog.getExistingDirectory(self.dlg, "Open Directory", folder, QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)
        if folder is not '':
            self.dlg.outputFolderDlg.setText(folder)

    def find_existing(self, folder):
        if not os.path.exists(folder):
            folder = os.path.abspath(os.path.join(folder, os.pardir))
            self.find_existing(folder)

        return folder
